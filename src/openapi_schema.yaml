paths:
  /version:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleVersionDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Check all module versions.
      description: Returns
      tags:
      - api_gateway_module
  /status:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleStatusDataDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Gets the status of all modules.
      description: 'Returns: List of all ModuleStatusDataDto when request succeed.
        If fails, returns Response with code ''500'''
      tags:
      - api_gateway_module
  /start:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '202':
          description: Accepted
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        description: Path to the video file
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Path'
            example: path=video/production.mp4
      summary: Starts defect detection modules.
      tags:
      - api_gateway_module
  /ingest-data-sources:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSourcesDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Retrieves available data sources from the Ingest Module.
      tags:
      - api_gateway_module
  /ingest-camera-sources:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraSourcesDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Retrieves available data sources from the Ingest Module.
      tags:
      - api_gateway_module
  /start-vdm:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '202':
          description: Accepted
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        description: VDM pipeline config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VdmConfig'
      summary: Starts VDM module
      tags:
      - api_gateway_module
  /stop:
    post:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: '"

        Stops all modules.'
      tags:
      - api_gateway_module
  /stop/{module}:
    post:
      responses:
        '500':
          description: Internal Server Error
        '400':
          description: Bad Request
        '202':
          description: Accepted
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: '"

        Stops module.'
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: module
      required: true
      schema:
        type: string
        minLength: 1
  /reset:
    post:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Stop all modules. Remove database and recreate it.
      tags:
      - api_gateway_module
  /frame/{frame_id}:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameResponse'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get frame image corresponding to a specific ID.
      description: "Parameters:\nframe_id: str\n    Frame image ID number.\n\nReturns:\n\
        Tuple[bytes, int] | Tuple[Dict, int]\n    Tuple where 0th element is frame\
        \ data and 1st element is request status code. If failed,\n    returns tuple\
        \ where 0th element is dict being representation of JSON format with occurred\n\
        \    error and 1st element is '500' status code."
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
  /frame/{frame_id}/metadata:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameMetaDataDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get metadata for selected frame id.
      description: "Parameters:\nframe_id: int\n    Frame id number of desired thumbnail.\n\
        \nReturns:\nTuple[FrameMetaDataDto, int] | Tuple[Dict, int]\n    Tuple where\
        \ 0th element is frame metadata and 1st element is request status code. If\n\
        \    failed, returns tuple where 0th element is dict being representation\
        \ of JSON format with\n    occurred error and 1st element is '500' status\
        \ code."
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
  /frame/{frame_id}/keyword/{keyword_id}/bounding-boxes:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoundingBoxDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get bounding boxes for provided frame id and keyword id
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
    - in: path
      name: keyword_id
      required: true
      schema:
        type: string
        minLength: 1
  /frame/{frame_id}/thumbnail:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThumbnailResponse'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get frame thumbnail by specific frame ID.
      description: "Parameters:\nframe_id: int\n    Frame id number of desired thumbnail.\n\
        \nReturns:\nTuple[bytes, int] | Tuple[Dict, int]:\n    Tuple where 0th element\
        \ is thumbnail data and 1st element is request status code. If\n    failed,\
        \ returns tuple where 0th element is dict being representation of JSON format\
        \ with\n    occurred error and 1st element is '500' status code."
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
  /frame/{frame_id}/defects:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all defects detected for selected frame ID.
      description: "Parameters:\n\nframe_id: int\n    Frame image ID number.\n\nReturns:\n\
        \nTuple[List[Dict], int]\n    Tuple where 0th element is JSON representation\
        \ of request response with all defects and 1st\n    element is request status\
        \ code. If failed, returns tuple where 0th element is dict being\n    representation\
        \ of JSON format with occured error and 1st element is '500' status code."
      tags:
      - api_gateway_module
      operationId: GetFrameDefects
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
  /frame-ids:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: List of frame ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInt64'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all frame ids
      tags:
      - api_gateway_module
  /frames-count:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Int64Dto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get frames total count.
      description: "Returns:\nTuple[Dict, int]\n    Tuple where 0th element is JSON\
        \ representation of request response with frames amount and\n    1st element\
        \ is request status code. If failed, returns tuple where 0th element is dict\n\
        \    being representation of JSON format with occured error and 1st element\
        \ is '500' status\n    code."
      tags:
      - api_gateway_module
  /valuable-frames-count:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Int64Dto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get valuable frames count.
      description: "Returns:\nTuple[Dict, int]\n    Tuple where 0th element is JSON\
        \ representation of request response with frames amount and\n    1st element\
        \ is request status code. If failed, returns tuple where 0th element is dict\n\
        \    being representation of JSON format with occured error and 1st element\
        \ is '500' status\n    code."
      tags:
      - api_gateway_module
  /frames/redundant:
    delete:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Delete all redundant frames from data store
      tags:
      - api_gateway_module
  /frames/metadata/update-annotation-flag:
    patch:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FramesAnnotationFlagDto'
      summary: Update need_annotation flag in datastore for selected frames.
      tags:
      - api_gateway_module
      operationId: UpdateFramesMetadataAnnotationFlag
  /frames/metadata/get-annotation-flag:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrameAnnotationFlagDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrameIdsDto'
      summary: Get need_annotation flags for selected frames.
      tags:
      - api_gateway_module
      operationId: GetFramesMetadataAnnotationFlag
  /keywords:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeywordDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all keywords.
      description: "Returns:\nFlask.Response\n    Response with all keywords. Returns\
        \ Response with code '500' when failed."
      tags:
      - api_gateway_module
  /frame/{frame_id}/keywords:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FrameKeywordDataDto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all keywords for selected frame ID.
      description: "Parameters:\nframe_id: int\n    ID nubmer of selected frame.\n\
        \nReturns:\nTuple[Dict, int]\n    Tuple where 0th element is JSON representation\
        \ of request response with frame's keywords with bounding boxes,\n    so same\
        \ keyword can occur more than once, and 1st element is request status code.\
        \ If failed, returns tuple\n    where 0th element is dict being representation\
        \ of JSON format with occured error and 1st element is '500'\n    status code."
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal server error.
        '200':
          description: Keywords saved successfully.
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PostKeyword'
      summary: Save or update multiple keywords associated with a specific frame.
      description: "Accepts a JSON payload containing a list of keyword objects (FrameKeywordDto),\n\
        validates and processes them individually by delegating to the backend manager.\n\
        \nParameters:\n    keywords_data (List[FrameKeywordDto]): List of keyword\
        \ DTOs deserialized from the request JSON body.\n    frame_id (int): Identifier\
        \ of the frame to which these keywords belong.\n\nReturns:\n    Tuple[Dict,\
        \ int]:\n        - 200: All keywords saved successfully.\n        - 500: An\
        \ error occurred saving one or more keywords."
      tags:
      - api_gateway_module
      operationId: postFrameKeywords
  /keyword/{keyword_id}/frames:
    get:
      responses:
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all frames for selected keyword ID.
      description: "Parameters:\nkeyword_id: int\n    Keyword ID number.\n\nReturns:\n\
        Tuple[Dict, int]\n    Tuple where 0th element is JSON representation of request\
        \ response with all frames where\n    keyword appeared and 1st element is\
        \ request status code. If failed, returns tuple where 0th\n    element is\
        \ dict being representation of JSON format with occured error and 1st element\
        \ is\n    '500' status code."
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: keyword_id
      required: true
      schema:
        type: string
        minLength: 1
  /frame/{frame_id}/keyword/replace:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeywordRename'
      summary: Replace keyword for selected frame, replace entire keyword if frame
        is None
      tags:
      - api_gateway_module
      operationId: replaceKeywordForSpecyficFrame
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
  /keyword/replace:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeywordRename'
      summary: Replace keyword for selected frame, replace entire keyword if frame
        is None
      tags:
      - api_gateway_module
      operationId: replaceKeywordForAllFrames
  /frames/{frame_id}/keywords/restore:
    post:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Restore internal keywords for selected frame ID.
      description: "Parameters:\nframe_id: str\n    Frame image ID number.\n\nReturns:\n\
        Tuple[Dict, int]\n    Tuple where 0th element is JSON representation of request\
        \ response after restoring frame's\n    keywords and 1st element is request\
        \ status code. If failed, returns tuple where 0th element\n    is dict being\
        \ representation of JSON format with occured error and 1st element is '500'\n\
        \    status code."
      tags:
      - api_gateway_module
    parameters:
    - in: path
      name: frame_id
      required: true
      schema:
        type: string
        minLength: 1
  /keywords/frames:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: List of frame ids for provided keywords
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInt64Dto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        description: List of keyword IDs, confidence min and max
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FramesForKeywords'
      summary: Get all frames for selected keyword IDs
      tags:
      - api_gateway_module
      operationId: GetFramesForProvidedKeywords
  /clusters:
    get:
      responses:
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get clusters for selected config id.
      description: "Returns:\nTuple[Dict, int]\n    Tuple where 0th element is JSON\
        \ representation of request response and 1st element is\n    request status\
        \ code. If failed, returns tuple where 0th element is dict being\n    representation\
        \ of JSON format with occured error and 1st element is '500' status code."
      tags:
      - api_gateway_module
  /clusters/config-ids:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInt64'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all distinct config ids.
      description: "Returns:\nTuple[str, int]\n    JSON with list of config ids, status\
        \ code."
      tags:
      - api_gateway_module
      operationId: GetConfigIds
  /configs/{config_id}/cluster-ids:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInt64'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get all cluster ids for specified config id.
      description: "Parameters:\nconfig_id: str\n    Config id.\n\nReturns:\nTuple[str,\
        \ int]\n    JSON with list of cluster ids, status code."
      tags:
      - api_gateway_module
      operationId: GetGroupIdsForConfig
    parameters:
    - in: path
      name: config_id
      required: true
      schema:
        type: string
        minLength: 1
  /configs/{config_id}/clusters/{cluster_id}/frames-count:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Int64Dto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get frames count for specified config id and cluster id.
      description: "Parameters:\nconfig_id: str\n    Config id.\ncluster_id: str\n\
        \    Cluster (group) id.\n\nReturns:\nTuple[str, int]\n    JSON with frames\
        \ count, status code."
      tags:
      - api_gateway_module
      operationId: GetFramesCountForGroupConfig
    parameters:
    - in: path
      name: config_id
      required: true
      schema:
        type: string
        minLength: 1
    - in: path
      name: cluster_id
      required: true
      schema:
        type: string
        minLength: 1
  /configs/{config_id}/clusters/{cluster_id}/valuable-frames-count:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Int64Dto'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get valuable frames count for specified config id and cluster id.
      description: "Parameters:\nconfig_id: str\n    Config id.\ncluster_id: str\n\
        \    Cluster (group) id.\n\nReturns:\nTuple[str, int]\n    JSON with frames\
        \ count, status code."
      tags:
      - api_gateway_module
      operationId: GetValuableFramesCountForGroupConfig
    parameters:
    - in: path
      name: config_id
      required: true
      schema:
        type: string
        minLength: 1
    - in: path
      name: cluster_id
      required: true
      schema:
        type: string
        minLength: 1
  /clusters/frame-ids-thumbnail:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: List of frame ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInt64'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        description: JSON with arguments like cluster_id, config_id, frames_count
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FramesForGroupThumbnail'
      summary: Get four frame ids for group thumbnail.
      description: "Parameters:\ncluster_id: int\n    Cluster id.\nconfig_id: int\n\
        \    Config id.\nframes_count: int\n    Frames count in specified group.\n\
        \nReturns:\nTuple[Dict, int]\n    Four frame ids for group thumbnail, status\
        \ code."
      tags:
      - api_gateway_module
      operationId: GetFrameIdsForGroupThumbnail
  /clusters/frame-ids:
    post:
      responses:
        '422':
          $ref: '#/components/responses/UNPROCESSABLE_ENTITY'
        '500':
          description: Internal Server Error
        '200':
          description: List of frame ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInt64'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      requestBody:
        description: Number of requested images and order of returned ids
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FramesFromCluster'
      summary: Get frame ids from cluster.
      description: "Parameters:\ncluster_id: Int\n    Defines cluster id.\nconfig_id:\
        \ Str\n    Defines config id.\nimages_number: Int\n    Defines number of images\
        \ to get.\norder: Str\n    Defines order of returned frames ids.\nredundant:\
        \ str\n        Get redundant images.\n\nReturns:\nTuple[Dict, int]\n    Tuple\
        \ where 0th element is JSON representation of request response and 1st element\
        \ is\n    request status code. If failed, returns tuple where 0th element\
        \ is dict being\n    representation of JSON format with occured error and\
        \ 1st element is '500' status code."
      tags:
      - api_gateway_module
      operationId: GetFrameIdsForGroup
  /pipelines:
    get:
      responses:
        '500':
          description: Internal Server Error
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Get pipelines with optional filtering by status RUNNING.
      description: "Returns:\nFlask.Response\n    Response with all pipelines. Returns\
        \ Response with code '500' when failed."
      tags:
      - api_gateway_module
  /experiments:
    get:
      responses:
        '500':
          description: Internal server error
        '200':
          description: List of all experiments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Experiment'
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Retrieve a list of all experiments stored in the database.
      description: "Returns:\nResponse:\n    - 200: with a list of experiments if\
        \ successful.\n    - 500: in case of any internal server error."
      tags:
      - api_gateway_module
      operationId: GetAllExperiments
  /create-experiment:
    post:
      responses:
        '500':
          description: Internal server error
        '400':
          description: Bad request or experiment already exists
        '200':
          description: Experiment created successfully
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Create a new experiment.
      description: "Request JSON must contain:\n- usecase_type (str)\n- accuracy (float)\n\
        - experiment_name (str)\n- keywords (list[str])\n- csp (str)\n\nReturns:\n\
        \    Response:\n        - 200: If the experiment was created successfully.\n\
        \        - 400: If the request data is invalid or the experiment already exists.\n\
        \        - 500: If an unexpected server-side error occurs."
      tags:
      - api_gateway_module
      operationId: CreateExperiment
  /stop-experiment:
    post:
      responses:
        '500':
          description: Internal server error or experiment not in running state or
            not found
        '400':
          description: Bad request
        '200':
          description: Experiment stopped successfully
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Stop an existing experiment.
      description: "Request JSON must contain:\n- experiment_name (str)\n\nReturns:\n\
        \    Response:\n        - 200: If the experiment was created successfully.\n\
        \        - 400: If the request data is invalid.\n        - 500: If an unexpected\
        \ server-side error occurs or experiment not in running state or not found."
      tags:
      - api_gateway_module
      operationId: StopExperiment
  /delete-experiment:
    post:
      responses:
        '500':
          description: Internal server error or experiment is in running state
        '400':
          description: Bad request
        '200':
          description: Experiment deleted successfully
        default:
          $ref: '#/components/responses/DEFAULT_ERROR'
      summary: Delete an experiment from the view list.
      description: "Request JSON must contain:\n- experiment_name (str)\n\nReturns:\n\
        \    Response:\n        - 200: If the experiment was created successfully.\n\
        \        - 400: If the request data is invalid.\n        - 500: If an unexpected\
        \ server-side error occurs or experiment is in running state."
      tags:
      - api_gateway_module
      operationId: DeleteExperiment
info:
  title: Gateway API Schema
  version: '1.0'
tags:
- name: api_gateway_module
  description: ''
openapi: 3.0.2
components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        status:
          type: string
          description: Error name
        message:
          type: string
          description: Error message
        errors:
          type: object
          description: Errors
          additionalProperties: {}
    PaginationMetadata:
      type: object
      properties:
        total:
          type: integer
        total_pages:
          type: integer
        first_page:
          type: integer
        last_page:
          type: integer
        page:
          type: integer
        previous_page:
          type: integer
        next_page:
          type: integer
    ModuleVersionDto:
      type: object
      properties:
        ModuleType:
          type: string
          enum:
          - INGEST
          - DEFECT_DETECTION
          - VALUABLE_DATA
        IsRequestSuccessful:
          type: boolean
        Version:
          type: string
          default: null
          nullable: true
      required:
      - IsRequestSuccessful
      - ModuleType
    ModuleStatusDataDto:
      type: object
      properties:
        ModuleType:
          type: string
          enum:
          - INGEST
          - DEFECT_DETECTION
          - VALUABLE_DATA
        IsRequestSuccessful:
          type: boolean
        ModuleStatus:
          default: null
          type: string
          enum:
          - IDLE
          - RUNNING
          - STOPPING
          - STOPPED
          - FAILED
          - null
          nullable: true
        TimeStamp:
          type: string
          default: null
          nullable: true
        FrameId:
          type: integer
          format: int64
          nullable: true
      required:
      - IsRequestSuccessful
      - ModuleType
    Path:
      type: object
      properties:
        path:
          type: string
      required:
      - path
    DataSourcesDto:
      type: object
      properties:
        ImageFolders:
          type: array
          items:
            type: string
        VideoFiles:
          type: array
          items:
            type: string
      required:
      - ImageFolders
      - VideoFiles
    CameraSourcesDto:
      type: object
      properties:
        LocalCameras:
          type: array
          items:
            type: string
      required:
      - LocalCameras
    ClusteringProfile:
      type: object
      properties:
        threshold:
          type: number
        min_community_size:
          type: integer
        init_max_size:
          type: integer
    VdmConfig:
      type: object
      properties:
        input_batch:
          type: string
        time_frame:
          type: integer
        caption_model:
          type: string
        reduction_model:
          type: string
        embedding_model:
          type: string
        keywords_model:
          type: string
        clustering_model:
          type: string
        merge_model:
          type: string
        merge_threshold:
          type: number
        data_manager:
          type: string
        keep_redundant:
          type: boolean
        clustering_profiles:
          type: array
          items:
            $ref: '#/components/schemas/ClusteringProfile'
    FrameResponse:
      type: object
      properties:
        frame:
          type: string
          description: Base64 encoded image
    FrameMetaDataDto:
      type: object
      properties:
        Height:
          type: integer
        Width:
          type: integer
        Timestamp:
          type: string
          format: date-time
        Id:
          type: integer
          format: int64
        IsValuable:
          type: boolean
          default: true
        Thumbnail:
          type: string
      required:
      - Id
    BoundingBoxDto:
      type: object
      properties:
        X1:
          type: number
        X2:
          type: number
        Y1:
          type: number
        Y2:
          type: number
      required:
      - X1
      - X2
      - Y1
      - Y2
    ThumbnailResponse:
      type: object
      properties:
        thumbnail:
          type: string
          description: Base64 encoded image thumbnail
    ListInt64:
      type: object
      properties:
        values:
          type: array
          items:
            type: integer
            format: int64
    Int64Dto:
      type: object
      properties:
        Value:
          type: integer
          format: int64
      required:
      - Value
    FramesAnnotationFlagDto:
      type: object
      properties:
        frame_ids:
          type: array
          items:
            type: integer
        need_annotation_flag:
          type: boolean
          default: false
    FrameIdsDto:
      type: object
      properties:
        frame_ids:
          type: array
          items:
            type: integer
    FrameAnnotationFlagDto:
      type: object
      properties:
        frame_id:
          type: integer
        need_annotation_flag:
          type: boolean
          default: false
      required:
      - frame_id
    KeywordDto:
      type: object
      properties:
        Name:
          type: string
        IsEntity:
          type: boolean
        Id:
          type: integer
          format: int64
        Count:
          type: integer
          format: int64
      required:
      - Count
      - Id
      - IsEntity
      - Name
    FrameKeywordDataDto:
      type: object
      properties:
        KeywordName:
          type: string
        Confidence:
          type: number
        X1:
          type: number
        X2:
          type: number
        Y1:
          type: number
        Y2:
          type: number
        Id:
          type: integer
          format: int64
        FrameId:
          type: integer
          format: int64
        KeywordId:
          type: integer
          format: int64
      required:
      - FrameId
      - Id
      - KeywordId
    PostKeyword:
      type: object
      properties:
        action:
          type: string
        name:
          type: string
        x1:
          type: number
        y1:
          type: number
        x2:
          type: number
        y2:
          type: number
        confidence:
          type: number
        is_entity:
          type: boolean
        origin:
          type: integer
        id:
          type: integer
      required:
      - action
      - confidence
      - is_entity
      - name
      - origin
    KeywordRename:
      type: object
      properties:
        SourceId:
          type: integer
        Target:
          type: string
      required:
      - SourceId
      - Target
    FramesForKeywords:
      type: object
      properties:
        keyword_ids:
          type: array
          description: List of keyword IDs
          items:
            type: integer
            format: int64
        confidence_min:
          type: number
          description: Minimum confidence level
        confidence_max:
          type: number
          description: Maximum confidence level
    ListInt64Dto:
      type: object
      properties:
        values:
          type: array
          items:
            type: integer
            format: int64
    FramesForGroupThumbnail:
      type: object
      properties:
        cluster_id:
          type: integer
          format: int64
          description: Cluster id
        config_id:
          type: integer
          format: int64
          description: Config id
        frames_count:
          type: integer
          format: int64
          description: Frames count in specified group
      required:
      - cluster_id
      - config_id
      - frames_count
    FramesFromCluster:
      type: object
      properties:
        cluster_id:
          type: integer
          format: int64
          description: Cluster id
        config_id:
          type: integer
          format: int64
          description: Config id
        images_number:
          type: integer
          format: int64
          description: Images number to get
        order:
          type: string
          description: Order (DESC/ASC)
        redundant:
          type: boolean
          description: Show redundant images
      required:
      - cluster_id
      - config_id
      - images_number
      - order
      - redundant
    Experiment:
      type: object
      properties:
        experiment_name:
          type: string
          description: Experiment name
        run_id:
          type: string
          description: Experiment ID
        status:
          type: string
          description: Experiment status
        image_ids:
          type: array
          description: List of image IDs
          items:
            type: integer
        annotation_format:
          type: string
          description: Format of annotations
        model_type:
          type: string
          description: Type of ML model used
        azure_experiment_details_json:
          type: object
          description: Azure experiment metadata as JSON
          additionalProperties:
            nullable: true
        deleted:
          type: boolean
          description: Is experiment deleted
      required:
      - annotation_format
      - azure_experiment_details_json
      - deleted
      - experiment_name
      - image_ids
      - model_type
      - run_id
      - status
  responses:
    DEFAULT_ERROR:
      description: Default error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UNPROCESSABLE_ENTITY:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
